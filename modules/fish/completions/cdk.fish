complete -f -c cdk -n '__fish_use_subcommand' -xa list -d "Lists all stacks in the app"
complete -f -c cdk -n '__fish_use_subcommand' -xa ls -d "Lists all stacks in the app"
complete -f -c cdk -n '__fish_use_subcommand' -xa synthesize -d "Synthesizes and prints the CloudFormation template for this stack"
complete -f -c cdk -n '__fish_use_subcommand' -xa synth -d "Synthesizes and prints the CloudFormation template for this stack"
complete -f -c cdk -n '__fish_use_subcommand' -xa bootstrap -d "Deploys the CDK toolkit stack into an AWS environment"
complete -f -c cdk -n '__fish_use_subcommand' -xa deploy -d "Deploys the stack(s) named STACKS into your AWS account"
complete -f -c cdk -n '__fish_use_subcommand' -xa destroy -d "Destroy the stack(s) named STACKS"
complete -f -c cdk -n '__fish_use_subcommand' -xa diff -d "Compares the specified stack with the deployed stack or a local template file, and returns with status 1 if any difference is found"
complete -f -c cdk -n '__fish_use_subcommand' -xa metadata -d "Returns all metadata associated with this stack"
complete -f -c cdk -n '__fish_use_subcommand' -xa init -d "Create a new, empty CDK project from a template."
complete -f -c cdk -n '__fish_use_subcommand' -xa context -d "Manage cached context values"
complete -f -c cdk -n '__fish_use_subcommand' -xa docs -d "Opens the reference documentation in a browser"
complete -f -c cdk -n '__fish_use_subcommand' -xa doc -d "Opens the reference documentation in a browser"
complete -f -c cdk -n '__fish_use_subcommand' -xa doctor -d "Check your set-up for potential problems"

complete -c cdk -s a -d "REQUIRED: command-line for executing your app or a cloud assembly directory (e.g. \"node bin/my-app.js\") [string]"
complete -c cdk -l app -d "REQUIRED: command-line for executing your app or a cloud assembly directory (e.g. \"node bin/my-app.js\") [string]"
complete -c cdk -s c -d "Add contextual string parameter (KEY=VALUE)  [array]"
complete -c cdk -l context -d "Add contextual string parameter (KEY=VALUE)  [array]"
complete -c cdk -s p -d "Name or path of a node package that extend the CDK features. Can be specified multiple times [array]"
complete -c cdk -l plugin -d "Name or path of a node package that extend the CDK features. Can be specified multiple times [array]"
complete -c cdk -l trace -d "Print trace for stack warnings [boolean]"
complete -c cdk -l strict -d "Do not construct stacks with warnings [boolean]"
complete -c cdk -l ignore-errors -d "Ignores synthesis errors, which will likely producean invalid output [boolean] [default: false]"
complete -c cdk -l ignore-errors -d "Ignores synthesis errors, which will likely produce"
complete -c cdk -s j -d "Use JSON output instead of YAML when templates are printed to STDOUT [boolean] [default: false]"
complete -c cdk -l json -d "Use JSON output instead of YAML when templates are printed to STDOUT [boolean] [default: false]"
complete -c cdk -s v -d "Show debug logs (specify multiple times to increase verbosity) [count] [default: false]"
complete -c cdk -l verbose -d "Show debug logs (specify multiple times to increase verbosity) [count] [default: false]"
complete -c cdk -l debug -d "Enable emission of additional debugging information, such as creation stack traces of tokens [boolean] [default: false]"
complete -c cdk -l profile -d "Use the indicated AWS profile as the default environment [string]"
complete -c cdk -l proxy -d "Use the indicated proxy. Will read from HTTPS_PROXY environment variable if not specified [string]"
complete -c cdk -l ca-bundle-path -d "Path to CA certificate to use when validating HTTPS requests. Will read from AWS_CA_BUNDLE environment variable if not specified [string]"
complete -c cdk -s i -d "Force trying to fetch EC2 instance credentials. Default: guess EC2 instance status [boolean]"
complete -c cdk -l ec2creds -d "Force trying to fetch EC2 instance credentials. Default: guess EC2 instance status [boolean]"
complete -c cdk -l version-reporting -d "Include the \"AWS::CDK::Metadata\" resource in synthesized templates (enabled by default) [boolean]"
complete -c cdk -l path-metadata -d "Include \"aws:cdk:path\" CloudFormation metadata for each resource (enabled by default) [boolean] [default: true]"
complete -c cdk -l asset-metadata -d "Include \"aws:asset:*\" CloudFormation metadata for resources that user assets (enabled by default) [boolean] [default: true]"
complete -c cdk -s r -d "ARN of Role to use when invoking CloudFormation [string]"
complete -c cdk -l role-arn -d "ARN of Role to use when invoking CloudFormation [string]"
complete -c cdk -l toolkit-stack-name -d "The name of the CDK toolkit stack [string]"
complete -c cdk -l staging -d "Copy assets to the output directory (use --no-staging to disable, needed for local debugging the source files with SAM CLI) [boolean] [default: true]"
complete -c cdk -s o -d "Emits the synthesized cloud assembly into a directory (default: cdk.out) [string]"
complete -c cdk -l output -d "Emits the synthesized cloud assembly into a directory (default: cdk.out) [string]"
complete -c cdk -l no-color -d "Removes colors and other style from console output [boolean] [default: false]"
complete -c cdk -l fail -d "Fail with exit code 1 in case of diff [boolean] [default: false]"
complete -c cdk -l version -d "Show version number [boolean]"
complete -c cdk -s l -d "Display environment information for each stack [boolean] [default: false]"
complete -c cdk -l long -d "Display environment information for each stack [boolean] [default: false]"
complete -c cdk -s h -d "Show help [boolean]"
complete -c cdk -l help -d "Show help [boolean]"
